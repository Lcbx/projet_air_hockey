<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAgHyMAIB8jACAfIwAgHyMAIB8jAAAAAAAAAAAAIB8jACAfIwAgHyMAIB8jBSAfIxcgHyM7IB8jTiAf
        Iy0gHyMsIB8jLCAfIy0gHyNOIB8jOyAfIxcgHyMFIB8jACAfIwAgHyMABAQEAAAAAAAgHyMAIB8jACAf
        IwAgHyMAIB8jACAfIwMgHyMQIB8jDSAfIwMgHyMAIB8jACAfIwAgHyMAIB8jCCAfIxwgHyMrIB8jGSAf
        IzYgHyNKIB8jDiAgJwAgIiYAIB8jDiAfI0ogHyM1IB8jGSAfIysgHyMcIB8jCCAfIwAgHyMAIB8jACAf
        IwAgHyMCIB8jDiAfIxAgHyMDIB8jHSAfI0ogHyM+IB8jLiAfIxsgHyMFIB8jACAfIwAgHyMVIB8jZCAf
        I0kgHyMZIB8jGiAfI0ogHyM0IB8jISAfIyEgHyM0IB8jSiAfIxogHyMZIB8jSSAfI2QgHyMVIB8jACAf
        IwAgHyMEIB8jHiAfIzogHyMjIB8jJSAfIxwgHyM5IB8jPiAfIz0gHyMqIB8jGyAfIzUgHyMdIB8jBCAf
        IwogHyNHIB8jPiAfI2EgHyNZIB8jUyAfI0MgHyM6IB8jOiAfI0QgHyNTIB8jWSAfI2EgHyM+IB8jRyAf
        IwogHyMDIB8jGiAfIzkgHyNIIB8jUSAfIxYgHyMSIB8jMyAfI0kgHyMsIB8jQiAfIzQgHyMwIB8jRSAf
        I04gHyM6IB8jLyAfIzUgHyMqIB8jQiAfIzkgHyNuIB8jXSAfI0AgHyNAIB8jXSAfI24gHyM5IB8jQiAf
        IyogHyM2IB8jLCAfI0AgHyMmIB8jMSAfI0wgHyNLIB8jMyAfIyggHyNJIB8jJSAfIyYgHyMnIB8jOCAf
        I0ggHyNOIB8jSyAfI1ogHyNdIB8jXSAfI0cgHyM7IB8jJyAfIysgHyNNIB8jaCAfI2kgHyNNIB8jKyAf
        IyggHyMyIB8jHCAfI0MgHyNZIB8jSiAfIycgHyMoIB8jPSAfIzcgHyMoIB8jJiAfIyUgHyMAIB8jASAf
        Iw0gHyMlIB8jCSAfIxcgHyMyIB8jRSAfI1EgHyNVIB8jRiAfIzwgHyMVIB8jSSAfI14gHyNVIB8jViAf
        I14gHyNJIB8jFiAfIyogHyMKIB8jMCAfI08gHyNCIB8jNiAfIxYgHyMJIB8jJSAfIw0gHyMBIB8jACAf
        IwANDgkAIB8jACAfIwAgHyMAIB8jACAfIwEgHyMOIB8jHSAfIzIgHyNWIB8jUyAfI2UgHyNDIB8jRSAf
        I1UgHyNVIB8jRSAfI0MgHyNlIB8jUiAfI0ogHyMwIB8jHyAfIw0gHyMBIB8jACAfIwAgHyMAIB8jAAAD
        AAAfHiIAAAAAAAAAAAAAAAAAIB8jACIhJgAgHyMAIB8jACAfIwAgHyMKIB8jQCAfI00gHyNeIB8jYCAf
        IzAgHyNCIB8jPyAfIz8gHyNCIB8jMCAfI2AgHyNeIB8jTSAfI0AgHyMKIB8jACAfIwAhICQAIB8jACEg
        JAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRwgACAfIwAgHyMAIB8jDCAfIyggHyNkIB8jkSAf
        I0UgHyMsIB8jIiAfIywgHyMpIB8jKSAfIywgHyMiIB8jLCAfI0UgHyORIB8jZCAfIyggHyMMIB8jACAf
        IwAgHyMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHSEAIB8jACAfIxkgHyMtIB8jTyAf
        I00gHyNTIB8jJCAfIwogHyMsIB8jHiAfIwwgHyMMIB8jHiAfIywgHyMNIB8jJCAfI1QgHyNNIB8jTyAf
        Iy0gHyMYIB8jAB8fIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIB8jACAfIwAgHyMIIB8jSyAf
        I20gHyN8IB8jMiAfIw4gHyMAIB8jDyAfI20gHyOXIB8jtSAfI7wgHyObIB8jfSAfIyEgHyMAIB8jDiAf
        IzIgHyN9IB8jbSAfI0sgHyMIIB8jAB8eIgAAAAAAAAAAAAAAAAAAAAAAAAAAAFdUYAAgHyMAIB8jACAf
        Ix4gHyNIIB8jbyAfI1UgHyMWIB8jACAfIwAgHyMAIB8jDyAfIx0gHyOJIB8jrCAfIzIgHyMLHx4iACAf
        IwAgHyMAIB8jFiAfI1UgHyNvIB8jSCAfIx4gHyMAIB8jACknLAAAAAAAAAAAAAAAAAAAAAAAHh0hACAf
        IwAgHyMYIB8jPSAfI0cgHyMzIB8jCiAfIwAgHyMAIB8jBiAfIzkgHyNhIB8jiiAfI7ggHyPDIB8jpCAf
        I1ogHyM5IB8jAiAfIwAgHyMAIB8jCiAfIzMgHyNHIB8jPSAfIxggHyMAIB4hAAAAAAAAAAAAAAAAAAAA
        AAAgHyMAIB8jACAfIzYgHyOBIB8jhCAfIycgHyMBIB8jACAfIyYgHyNXIB8jwiAfI64gHyOWIB8jdiAf
        I3cgHyOQIB8jwiAfI54gHyOBIB8jCyAgIgAgHyMBIB8jJyAfI4UgHyOBIB8jNiAfIwAgHyMAAAAAAAAA
        AAAAAAAAOjg/ACAfIwAgHyMOIB8jKyAfI1MgHyNIIB8jDiAfIwAgHyMjIB8jaCAfI9AgHyNwIB8jHSAf
        IwAgHyMAIB8jACAfIwEgHyMcIB8jeSAfI7YgHyOKIB8jHCAfIwAgHyMOIB8jSCAfI1MgHyMsIB8jDiAf
        IwAcGx4AAAAAAAAAAAAfHyIAIB8jACAfIyYgHyNFIB8jWyAfIx4gHyMAIB8jAyAfI2QgHyPNIB8jTyAf
        IxwgHyMHIB8jAiAfI0YgHyNGIB8jAiAfIwggHyMbIB8jVCAfI74gHyNhIB8jEiAfIwAgHyMeIB8jWyAf
        I0UgHyMmIB8jACAfIwAAAAAAAAAAACAfIwAfHyMAIB8jMSAfI3AgHyNcIB8jLiAfIwAgHyNEIB8jvCAf
        I28gHyMAIB8jMCAfI0AgHyMrIB8jliAfI5YgHyMqIB8jQSAfIzAgHyMAIB8jdCAfI70gHyMjIB8jASAf
        Iy4gHyNcIB8jcCAfIzEgHyQAIB8jAAAAAAAAAAAAISAkACEfJAAgHyMjIB8jVyAfI3ggHyMvIB8jByAf
        I18gHyOxIB8jIiAfIyQgHyM+IB8jfSAfI2UgHyONIB8jjSAfI2UgHyN9IB8jPSAfIyQgHyMhIB8jtyAf
        I4QgHyMEIB8jLyAfI3ggHyNXIB8jIyAfIwAgHyMAAAAAAAAAAAAgHyMAIB8jAyAfIywgHyNlIB8jSyAf
        Iw0gHyMLIB8jlyAfI5QgHyMPIB8jOSAfIxggHyNZIB8jfiAfI3EgHyNyIB8jfiAfI1kgHyMXIB8jOSAf
        Iw8gHyOPIB8jgSAfIw8gHyMNIB8jSyAfI2UgHyMsIB8jAyAfIwAAAAAAAAAAACAfIwAgHyMLIB8jUSAf
        I5UgHyNHIB8jIiAfIyAgHyOvIB8jdyAfIwAgHyMgIB8jNyAfIyggHyNEIB8jtiAfI7YgHyNEIB8jKSAf
        IzYgHyMgIB8jACAfI3ggHyOpIB8jGSAfIyIgHyNHIB8jlSAfI1EgHyMLIB8jAAAAAAAAAAAAIB8jACAf
        IwUgHyMuIB8jYyAfI3sgHyMqIB8jDyAfI40gHyN8IB8jACAfIyIgHyNIIB8jUCAfI1ogHyPmIB8j5iAf
        I1ogHyNQIB8jSCAfIyIgHyMAIB8jfSAfI6wgHyMYIB8jKiAfI3sgHyNjIB8jLiAfIwUgHyMAAAAAAAAA
        AAAgHyMAIB8jBiAfIycgHyNlIB8jYyAfIyQgHyMTIB8jnyAfI5ogHyMDIB8jDCAfI0IgHyNkIB8jnSAf
        I/AgHyPwIB8jnCAfI2QgHyNCIB8jDCAfIwQgHyObIB8jdiAfIwwgHyMlIB8jYyAfI2UgHyMnIB8jBiAf
        IwAAAAAAAAAAACAfIwAgHyMAIB8jMCAfI2EgHyNNIB8jMSAfIwMgHyNQIB8jySAfIywgHyMAIB8jACAf
        IwggHyNrIB8jyiAfI8ogHyNqIB8jCCAfIwAgHyMAIB8jLCAfI7sgHyN1IB8jBiAfIzEgHyNNIB8jYiAf
        IzAgHyMAIB8jAAAAAAAAAAAAJiUqACAfIwAgHyMMIB8jNiAfI1IgHyNFIB8jACAfIzAgHyORIB8jlyAf
        IwcgHyMAIB8jCCAfI2IgHyONIB8jjSAfI2IgHyMIIB8jACAfIwcgHyOUIB8jsCAfIxYjHyMAIB8jRSAf
        I1IgHyM2IB8jDCAfIwAeHSEAAAAAAAAAAAAAAAAAIB8jACAfIwIgHyMxIB8jhiAfI0MgHyMCIB8jACAf
        I2kgHyOwIB8jgSAfIwwgHyMDIB8jJyAfI0IgHyNCIB8jJiAfIwMgHyMMIB8jgSAfI7ggHyNIIB8jCSAf
        IwIgHyNDIB8jhiAfIzIgHyMCIB8jAAAAAAAAAAAAAAAAAAAAAAAiISUAIB8jACAfIyQgHyNoIB8jXCAf
        Iy4gHyMOIB8jAiAfI2YgHyO4IB8joyAfI0kgHyMcIB8jBiAfIwYgHyMcIB8jSCAfI6kgHyOqIB8jbCAf
        IwsgHyMMIB8jLiAfI1wgHyNoIB8jJCAfIwAhICQAAAAAAAAAAAAAAAAAAAAAAAAAAAAgHyMAIB8jACAf
        Iy0gHyNpIB8jQCAfIzMgHyMBIB8jDSAfIzUgHyOlIB8jtCAfI7QgHyOrIB8jqyAfI68gHyPMIB8jfCAf
        I1sgHyMAIB8jASAfIzMgHyNAIB8jaSAfIy0gHyMAIB8jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAf
        IwAgHyMAIB8jHiAfIzYgHyNaIB8jQSAfIwIgHyMAIB8jBSAfIwsgHyNMIB8jSCAfI7ogHyOlIB8jZyAf
        IzsgHyMXIB8jACAfIwAgHyMCIB8jQSAfI1ogHyM2IB8jHiAfIwAgHyMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACAfIwAgHyMIIB8jMSAfI2MgHyM7IB8jHiAfIwIgHyMAIB8jCSAfIzEgHyNSIB8jxCAf
        I6ggHyNNIB8jJiAfIwMgHyMAIB8jAiAfIx4gHyM7IB8jYiAfIzAgHyMIIB8jAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAIB8jACAfIwAgHyMSIB8jQiAfIzIgHyMuIB8jGiAfIwAgHyMfIB8jaiAf
        I3ogHyN/IB8jfiAfI3cgHyNfIB8jDyAfIwAgHyMaIB8jLSAfIzIgHyNCIB8jEiAfIwAgHyMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgIAIB8jACAfIwAgHyMCIB8jECAfIzIgHyMmIB8jACAf
        IwAgHyMAIB8jACAfIwAgHyMAIB8jACAfIwAgHyMAIB8jACAfIyYgHyMyIB8jECAfIwIgHyMAIB8jACAf
        IwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>